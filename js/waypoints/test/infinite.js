// Generated by CoffeeScript 1.6.2
(function() {
  var standardWait;

  $.waypoints.settings.scrollThrottle = 10;

  $.waypoints.settings.resizeThrottle = 20;

  standardWait = 50;

  describe('Waypoints Infinite Scroll Shortcut', function() {
    var $container, $items, $more, $win, afterHit, beforeHit;

    $items = $container = $more = beforeHit = afterHit = null;
    $win = $(window);
    beforeEach(function() {
      loadFixtures('infinite.html');
      $items = $('.infinite-item');
      $container = $('.infinite-container');
      $more = $('.infinite-more-link');
      return beforeHit = afterHit = false;
    });
    it('returns the same jQuery object for chaining', function() {
      return expect($items.waypoint('infinite').get()).toEqual($items.get());
    });
    describe('loading new pages', function() {
      beforeEach(function() {
        var done, options;

        options = {
          onBeforePageLoad: function() {
            return beforeHit = true;
          },
          onAfterPageLoad: function() {
            return afterHit = true;
          }
        };
        $container.waypoint('infinite', options);
        runs(function() {
          var scrollVal;

          scrollVal = $.waypoints('viewportHeight') - $container.height();
          return $win.scrollTop(scrollVal);
        });
        done = function() {
          return $('.infinite-item').length > $items.length;
        };
        return waitsFor(done, 2000, 'new items to load');
      });
      it('appends them to the infinite container', function() {
        return expect($('.infinite-container > .infinite-item').length).toEqual(10);
      });
      it('replaces the more link with the new more link', function() {
        expect($more[0]).not.toEqual($('.infinite-more-link')[0]);
        return expect($('.infinite-more-link').length).toEqual(1);
      });
      it('fires the before callback', function() {
        return expect(beforeHit).toBeTruthy();
      });
      return it('fires the after callback', function() {
        return expect(afterHit).toBeTruthy();
      });
    });
    describe('when no more link on initialize', function() {
      beforeEach(function() {
        $more.remove();
        return $container.waypoint('infinite');
      });
      return it('does not create the waypoint', function() {
        return expect($.waypoints().vertical.length).toEqual(0);
      });
    });
    return afterEach(function() {
      $.waypoints('destroy');
      return $win.scrollTop(0);
    });
  });

}).call(this);
